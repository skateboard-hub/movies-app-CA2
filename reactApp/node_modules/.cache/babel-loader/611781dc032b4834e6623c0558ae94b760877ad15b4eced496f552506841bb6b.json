{"ast":null,"code":"export const login = (username, password) => {\n  return fetch('/api/users', {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    method: 'post',\n    body: JSON.stringify({\n      username: username,\n      password: password\n    })\n  }).then(res => res.json());\n};\nexport const signup = (username, password) => {\n  return fetch('/api/users?action=register', {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    method: 'post',\n    body: JSON.stringify({\n      username: username,\n      password: password\n    })\n  }).then(res => res.json());\n};\nexport const addFavourite = (username, movie) => {\n  return fetch(`/api/users/${username}/favourites`, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    method: 'post',\n    body: JSON.stringify({\n      movie\n    })\n  }).then(res => res.json());\n};\nexport const getFavourites = (username, id) => {\n  return fetch(`/${username}/favourites`, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    method: 'get',\n    body: JSON.stringify({\n      id: id\n    })\n  }).then(res => res.json());\n};\nexport const getTopRatedMovies = _ref => {\n  let {\n    queryKey\n  } = _ref;\n  const [, pagePart] = queryKey;\n  const {\n    page\n  } = pagePart;\n  return fetch(`/topRated/${page}`).then(response => {\n    if (!response.ok) {\n      throw new Error(response.json().message);\n    }\n    return response.json();\n  }).catch(error => {\n    throw error;\n  });\n};","map":{"version":3,"names":["login","username","password","fetch","headers","method","body","JSON","stringify","then","res","json","signup","addFavourite","movie","getFavourites","id","getTopRatedMovies","queryKey","pagePart","page","response","ok","Error","message","catch","error"],"sources":["C:/Personal/Project/VS code/movies-api-CA2/reactApp/src/api/movies-api.js"],"sourcesContent":["export const login = (username, password) => {\r\n    return fetch('/api/users', {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        method: 'post',\r\n        body: JSON.stringify({ username: username, password: password })\r\n    }).then(res => res.json())\r\n};\r\n\r\nexport const signup = (username, password) => {\r\n    return fetch('/api/users?action=register', {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        method: 'post',\r\n        body: JSON.stringify({ username: username, password: password })\r\n    }).then(res => res.json())\r\n};\r\n\r\nexport const addFavourite = (username, movie) => {\r\n    return fetch(`/api/users/${username}/favourites`, {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        method: 'post',\r\n        body: JSON.stringify({ movie })\r\n    }).then(res => res.json())\r\n};\r\n\r\nexport const getFavourites = (username, id) => {\r\n    return fetch(`/${username}/favourites`, {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        method: 'get',\r\n        body: JSON.stringify({ id: id })\r\n    }).then(res => res.json())\r\n};\r\n\r\n\r\nexport const getTopRatedMovies = ({ queryKey}) => {\r\n    const [, pagePart] = queryKey;\r\n    const { page } = pagePart;\r\n    return fetch(`/topRated/${page}`\r\n    ).then((response) => {\r\n        if (!response.ok) {\r\n            throw new Error(response.json().message);\r\n        }\r\n        return response.json();\r\n    })\r\n        .catch((error) => {\r\n            throw error\r\n        });\r\n};"],"mappings":"AAAA,OAAO,MAAMA,KAAK,GAAG,CAACC,QAAQ,EAAEC,QAAQ,KAAK;EACzC,OAAOC,KAAK,CAAC,YAAY,EAAE;IACvBC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,QAAQ,EAAEA,QAAQ;MAAEC,QAAQ,EAAEA;IAAS,CAAC;EACnE,CAAC,CAAC,CAACO,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMC,MAAM,GAAG,CAACX,QAAQ,EAAEC,QAAQ,KAAK;EAC1C,OAAOC,KAAK,CAAC,4BAA4B,EAAE;IACvCC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,QAAQ,EAAEA,QAAQ;MAAEC,QAAQ,EAAEA;IAAS,CAAC;EACnE,CAAC,CAAC,CAACO,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC;AAC9B,CAAC;AAED,OAAO,MAAME,YAAY,GAAG,CAACZ,QAAQ,EAAEa,KAAK,KAAK;EAC7C,OAAOX,KAAK,CAAE,cAAaF,QAAS,aAAY,EAAE;IAC9CG,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEM;IAAM,CAAC;EAClC,CAAC,CAAC,CAACL,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMI,aAAa,GAAG,CAACd,QAAQ,EAAEe,EAAE,KAAK;EAC3C,OAAOb,KAAK,CAAE,IAAGF,QAAS,aAAY,EAAE;IACpCG,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,MAAM,EAAE,KAAK;IACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEQ,EAAE,EAAEA;IAAG,CAAC;EACnC,CAAC,CAAC,CAACP,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC;AAC9B,CAAC;AAGD,OAAO,MAAMM,iBAAiB,GAAG,QAAiB;EAAA,IAAhB;IAAEC;EAAQ,CAAC;EACzC,MAAM,GAAGC,QAAQ,CAAC,GAAGD,QAAQ;EAC7B,MAAM;IAAEE;EAAK,CAAC,GAAGD,QAAQ;EACzB,OAAOhB,KAAK,CAAE,aAAYiB,IAAK,EAAC,CAC/B,CAACX,IAAI,CAAEY,QAAQ,IAAK;IACjB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAACF,QAAQ,CAACV,IAAI,EAAE,CAACa,OAAO,CAAC;IAC5C;IACA,OAAOH,QAAQ,CAACV,IAAI,EAAE;EAC1B,CAAC,CAAC,CACGc,KAAK,CAAEC,KAAK,IAAK;IACd,MAAMA,KAAK;EACf,CAAC,CAAC;AACV,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}