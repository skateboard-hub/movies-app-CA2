{"ast":null,"code":"var _jsxFileName = \"C:\\\\Personal\\\\Project\\\\VS code\\\\movies-api-CA2\\\\reactApp\\\\src\\\\contexts\\\\moviesContext.js\";\nimport React, { useState } from \"react\";\nimport { login, signup } from \"../api/movies-api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MoviesContext = /*#__PURE__*/React.createContext(null);\nconst MoviesContextProvider = props => {\n  const [favorites, setFavorites] = useState([]);\n  const [myReviews, setMyReviews] = useState({});\n  const [playlist, setplaylist] = useState([]);\n  const [knownFor, setKnownFor] = useState([]);\n  const existingToken = localStorage.getItem(\"token\");\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [authToken, setAuthToken] = useState(existingToken);\n  const [userName, setUserName] = useState(\"\");\n  const addToFavorites = movie => {\n    let newFavorites = [];\n    if (!favorites.includes(movie.id)) {\n      newFavorites = [...favorites, movie.id];\n    } else {\n      newFavorites = [...favorites];\n    }\n    setFavorites(newFavorites);\n  };\n  const addReview = (movie, review) => {\n    setMyReviews({\n      ...myReviews,\n      [movie.id]: review\n    });\n  };\n  const addPlaylist = movie => {\n    let newPlaylist = [];\n    if (!playlist.includes(movie.id)) {\n      newPlaylist = [...playlist, movie.id];\n    } else {\n      newPlaylist = [...playlist];\n    }\n    setplaylist(newPlaylist);\n    console.log(playlist);\n  };\n  const addKnownFor = people => {\n    let newKnownFor = people.known_for;\n    setKnownFor(newKnownFor);\n  };\n  const changeLogState = submit => {\n    console.log(\"submit:\" + submit);\n    console.log(\"user:\" + user);\n    if (submit[0] === user[0] && submit[1] === user[1]) {\n      setIsLog(true);\n    } else {\n      setIsLog(false);\n    }\n  };\n\n  //console.log(myReviews);\n  // We will use this function in a later section\n  const removeFromFavorites = movie => {\n    setFavorites(favorites.filter(mId => mId !== movie.id));\n  };\n\n  //AuContext\n  const setToken = data => {\n    localStorage.setItem(\"token\", data);\n    setAuthToken(data);\n  };\n  const authenticate = async (username, password) => {\n    const result = await login(username, password);\n    if (result.token) {\n      setToken(result.token);\n      setIsAuthenticated(true);\n      setUserName(username);\n    }\n  };\n  const register = async (username, password) => {\n    const result = await signup(username, password);\n    console.log(result.code);\n    return result.code == 201 ? true : false;\n  };\n  const signout = () => {\n    setTimeout(() => setIsAuthenticated(false), 100);\n  };\n  return /*#__PURE__*/_jsxDEV(MoviesContext.Provider, {\n    value: {\n      knownFor,\n      favorites,\n      addToFavorites,\n      removeFromFavorites,\n      addReview,\n      addPlaylist,\n      addKnownFor,\n      changeLogState,\n      user,\n      isAuthenticated,\n      authenticate,\n      register,\n      signout,\n      userName\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\nexport default MoviesContextProvider;","map":{"version":3,"names":["React","useState","login","signup","MoviesContext","createContext","MoviesContextProvider","props","favorites","setFavorites","myReviews","setMyReviews","playlist","setplaylist","knownFor","setKnownFor","existingToken","localStorage","getItem","isAuthenticated","setIsAuthenticated","authToken","setAuthToken","userName","setUserName","addToFavorites","movie","newFavorites","includes","id","addReview","review","addPlaylist","newPlaylist","console","log","addKnownFor","people","newKnownFor","known_for","changeLogState","submit","user","setIsLog","removeFromFavorites","filter","mId","setToken","data","setItem","authenticate","username","password","result","token","register","code","signout","setTimeout","children"],"sources":["C:/Personal/Project/VS code/movies-api-CA2/reactApp/src/contexts/moviesContext.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { login, signup } from \"../api/movies-api\";\n\nexport const MoviesContext = React.createContext(null);\n\nconst MoviesContextProvider = (props) => {\n  const [favorites, setFavorites] = useState( [] )\n  const [myReviews, setMyReviews] = useState( {} ) \n  const [playlist, setplaylist] = useState( [] )\n  const [knownFor, setKnownFor] = useState( [] )\n\n\n  const existingToken = localStorage.getItem(\"token\");\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [authToken, setAuthToken] = useState(existingToken);\n  const [userName, setUserName] = useState(\"\");\n\n  const addToFavorites = (movie) => {\n    let newFavorites = [];\n    if (!favorites.includes(movie.id)){\n      newFavorites = [...favorites, movie.id];\n    }\n    else{\n      newFavorites = [...favorites];\n    }\n    setFavorites(newFavorites)\n  };\n  const addReview = (movie, review) => {\n    setMyReviews( {...myReviews, [movie.id]: review } )\n  };\n  const addPlaylist = (movie) => {\n    let newPlaylist = [];\n    if (!playlist.includes(movie.id)){\n      newPlaylist = [...playlist, movie.id];\n    }\n    else{\n      newPlaylist = [...playlist];\n    }\n    setplaylist(newPlaylist)\n    console.log(playlist);\n  } ;\n  const addKnownFor = (people) => {\n    let newKnownFor = people.known_for;\n    setKnownFor(newKnownFor)\n  };\n  const changeLogState = (submit) => {\n    console.log(\"submit:\"+submit)\n    console.log(\"user:\"+user)\n    if(submit[0] === user[0] && submit[1] === user[1]){\n        setIsLog(true); \n    }\n    else{\n      setIsLog(false); \n    }\n  };\n  \n  //console.log(myReviews);\n  // We will use this function in a later section\n  const removeFromFavorites = (movie) => {\n    setFavorites( favorites.filter(\n      (mId) => mId !== movie.id\n    ) )\n  };\n\n  //AuContext\n  const setToken = (data) => {\n    localStorage.setItem(\"token\", data);\n    setAuthToken(data);\n  }\n\n  const authenticate = async (username, password) => {\n    const result = await login(username, password);\n    if (result.token) {\n      setToken(result.token);\n      setIsAuthenticated(true);\n      setUserName(username);\n    }\n  };\n\n  const register = async (username, password) => {\n    const result = await signup(username, password);\n    console.log(result.code);\n    return (result.code == 201) ? true : false;\n  };\n\n  const signout = () => {\n    setTimeout(() => setIsAuthenticated(false), 100);\n  }\n\n  return (\n    <MoviesContext.Provider\n      value={{\n        knownFor,\n        favorites,\n        addToFavorites,\n        removeFromFavorites,\n        addReview,\n        addPlaylist,\n        addKnownFor,\n        changeLogState,\n\n        \n        user,\n        isAuthenticated,\n        authenticate,\n        register,\n        signout,\n        userName\n      }}\n    >\n      {props.children}\n    </MoviesContext.Provider>\n  );\n};\n\nexport default MoviesContextProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}