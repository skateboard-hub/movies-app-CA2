{"ast":null,"code":"var _jsxFileName = \"C:\\\\Personal\\\\Project\\\\VS code\\\\movies-api-CA2\\\\reactApp\\\\src\\\\pages\\\\favoriteMoviesPage.js\";\nimport React, { useContext, useState } from \"react\";\nimport PageTemplate from \"../components/templateMovieListPage\";\nimport { MoviesContext } from \"../contexts/moviesContext\";\nimport { useQueries } from \"react-query\";\nimport { getMovie } from \"../api/tmdb-api\";\nimport Spinner from '../components/spinner';\nimport RemoveFromFavorites from \"../components/cardIcons/removeFromFavorites\";\nimport WriteReview from \"../components/cardIcons/writeReview\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FavoriteMoviesPage = () => {\n  const {\n    favorites: movieIds\n  } = useContext(MoviesContext);\n\n  // Create an array of queries and run in parallel.\n  const favoriteMovieQueries = useQueries(movieIds.map(movieId => {\n    return {\n      queryKey: [\"movie\", {\n        id: movieId\n      }],\n      queryFn: getMovie\n    };\n  }));\n  const movies = favoriteMovieQueries.map(q => {\n    q.data.genre_ids = q.data.genres.map(g => g.id);\n    return q.data;\n  });\n\n  // Check if any of the parallel queries is still loading.\n  const isLoading = favoriteMovieQueries.find(m => m.isLoading === true);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(PageTemplate, {\n      title: \"Favorite Movies\",\n      movies: movies,\n      action: movie => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(RemoveFromFavorites, {\n            movie: movie\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(WriteReview, {\n            movie: movie\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\nexport default FavoriteMoviesPage;","map":{"version":3,"names":["React","useContext","useState","PageTemplate","MoviesContext","useQueries","getMovie","Spinner","RemoveFromFavorites","WriteReview","FavoriteMoviesPage","favorites","movieIds","favoriteMovieQueries","map","movieId","queryKey","id","queryFn","movies","q","data","genre_ids","genres","g","isLoading","find","m","movie"],"sources":["C:/Personal/Project/VS code/movies-api-CA2/reactApp/src/pages/favoriteMoviesPage.js"],"sourcesContent":["import React, { useContext,useState } from \"react\";\nimport PageTemplate from \"../components/templateMovieListPage\";\nimport { MoviesContext } from \"../contexts/moviesContext\";\nimport { useQueries } from \"react-query\";\nimport { getMovie } from \"../api/tmdb-api\";\nimport Spinner from '../components/spinner'\nimport RemoveFromFavorites from \"../components/cardIcons/removeFromFavorites\";\nimport WriteReview from \"../components/cardIcons/writeReview\";\n\n\n\nconst FavoriteMoviesPage = () => {\n\n  const { favorites: movieIds } = useContext(MoviesContext);\n\n  // Create an array of queries and run in parallel.\n  const favoriteMovieQueries = useQueries(\n    movieIds.map((movieId) => {\n      return {\n        queryKey: [\"movie\", { id: movieId }],\n        queryFn: getMovie,\n      };\n    })\n  );\n\n  const movies = favoriteMovieQueries.map((q) => {\n    q.data.genre_ids = q.data.genres.map(g => g.id)\n    return q.data\n  });\n  \n  // Check if any of the parallel queries is still loading.\n  const isLoading = favoriteMovieQueries.find((m) => m.isLoading === true);\n\n  if (isLoading) {\n    return <Spinner />;\n  }\n\n  \n\n  return (\n    <>\n\n        <PageTemplate\n          title=\"Favorite Movies\"\n          movies={movies}\n          action={(movie) => {\n            return (\n              <>\n                <RemoveFromFavorites movie={movie} />\n                <WriteReview movie={movie} />\n              </>\n            );\n          }}\n        />\n    </>\n  );\n};\n\nexport default FavoriteMoviesPage;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,UAAU,EAACC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,qCAAqC;AAC9D,SAASC,aAAa,QAAQ,2BAA2B;AACzD,SAASC,UAAU,QAAQ,aAAa;AACxC,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,mBAAmB,MAAM,6CAA6C;AAC7E,OAAOC,WAAW,MAAM,qCAAqC;AAAC;AAAA;AAI9D,MAAMC,kBAAkB,GAAG,MAAM;EAE/B,MAAM;IAAEC,SAAS,EAAEC;EAAS,CAAC,GAAGX,UAAU,CAACG,aAAa,CAAC;;EAEzD;EACA,MAAMS,oBAAoB,GAAGR,UAAU,CACrCO,QAAQ,CAACE,GAAG,CAAEC,OAAO,IAAK;IACxB,OAAO;MACLC,QAAQ,EAAE,CAAC,OAAO,EAAE;QAAEC,EAAE,EAAEF;MAAQ,CAAC,CAAC;MACpCG,OAAO,EAAEZ;IACX,CAAC;EACH,CAAC,CAAC,CACH;EAED,MAAMa,MAAM,GAAGN,oBAAoB,CAACC,GAAG,CAAEM,CAAC,IAAK;IAC7CA,CAAC,CAACC,IAAI,CAACC,SAAS,GAAGF,CAAC,CAACC,IAAI,CAACE,MAAM,CAACT,GAAG,CAACU,CAAC,IAAIA,CAAC,CAACP,EAAE,CAAC;IAC/C,OAAOG,CAAC,CAACC,IAAI;EACf,CAAC,CAAC;;EAEF;EACA,MAAMI,SAAS,GAAGZ,oBAAoB,CAACa,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACF,SAAS,KAAK,IAAI,CAAC;EAExE,IAAIA,SAAS,EAAE;IACb,oBAAO,QAAC,OAAO;MAAA;MAAA;MAAA;IAAA,QAAG;EACpB;EAIA,oBACE;IAAA,uBAEI,QAAC,YAAY;MACX,KAAK,EAAC,iBAAiB;MACvB,MAAM,EAAEN,MAAO;MACf,MAAM,EAAGS,KAAK,IAAK;QACjB,oBACE;UAAA,wBACE,QAAC,mBAAmB;YAAC,KAAK,EAAEA;UAAM;YAAA;YAAA;YAAA;UAAA,QAAG,eACrC,QAAC,WAAW;YAAC,KAAK,EAAEA;UAAM;YAAA;YAAA;YAAA;UAAA,QAAG;QAAA,gBAC5B;MAEP;IAAE;MAAA;MAAA;MAAA;IAAA;EACF,iBACH;AAEP,CAAC;AAED,eAAelB,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}