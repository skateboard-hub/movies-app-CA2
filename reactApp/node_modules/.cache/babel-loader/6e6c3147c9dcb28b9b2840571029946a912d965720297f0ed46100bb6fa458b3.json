{"ast":null,"code":"var _jsxFileName = \"C:\\\\Personal\\\\Project\\\\VS code\\\\movies-api-CA2\\\\reactApp\\\\src\\\\pages\\\\recommendPage.js\";\nimport React, { useContext, useState } from \"react\";\nimport { getMovies, getMovieById } from \"../api/movies-api\";\nimport PageTemplate from '../components/templateMovieListPage';\nimport { useQuery } from 'react-query';\nimport Spinner from '../components/spinner';\nimport AddToFavoritesIcon from '../components/cardIcons/addToFavorites';\nimport { useParams } from 'react-router-dom';\nimport { MoviesContext } from \"../contexts/moviesContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RecommendPage = props => {\n  const [favoriteGenres, setFavoriteGenres] = useState([]);\n  const context = useContext(MoviesContext);\n  const {\n    page\n  } = useParams();\n  const {\n    data: pages,\n    error,\n    isLoading,\n    isError\n  } = useQuery([\"RecommendPage\"], getMovies);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 12\n    }, this);\n  }\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 12\n    }, this);\n  }\n  const movies = pages;\n  const favorites = movies.filter(m => m.favorite);\n  localStorage.setItem('favorites', JSON.stringify(favorites));\n  context.favorites.map(json => {\n    getMovieById(json).then(json => {\n      const genreIds = json.genres.map(response => response.id);\n      setFavoriteGenres(genreIds);\n    });\n  });\n  function intersection(firstArr, secondArr) {\n    let hashMap = {},\n      intersectionArr = [];\n\n    // 第一步：数组 1 利用 hashMap 实现去重\n    firstArr.forEach(function (val) {\n      hashMap[val] = 1;\n    });\n\n    // 第二步：遍历数组2，去重 secondArr ，并判断是否有交集\n    secondArr.forEach(val => {\n      if (hashMap[val] === 1) {\n        intersectionArr.push(val);\n        hashMap[val]++;\n      }\n    });\n    if (intersectionArr = []) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  movies.filter(movie => {\n    console.log(compare([28, 878, 14], [28, 12, 18, 14]));\n    console.log(favoriteGenres);\n    console.log(movie.genre_ids);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(PageTemplate, {\n      title: \"Recommend Movies\",\n      movies: movies,\n      action: movie => {\n        return /*#__PURE__*/_jsxDEV(AddToFavoritesIcon, {\n          movie: movie\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 18\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\nexport default RecommendPage;","map":{"version":3,"names":["React","useContext","useState","getMovies","getMovieById","PageTemplate","useQuery","Spinner","AddToFavoritesIcon","useParams","MoviesContext","RecommendPage","props","favoriteGenres","setFavoriteGenres","context","page","data","pages","error","isLoading","isError","message","movies","favorites","filter","m","favorite","localStorage","setItem","JSON","stringify","map","json","then","genreIds","genres","response","id","intersection","firstArr","secondArr","hashMap","intersectionArr","forEach","val","push","movie","console","log","compare","genre_ids"],"sources":["C:/Personal/Project/VS code/movies-api-CA2/reactApp/src/pages/recommendPage.js"],"sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport { getMovies, getMovieById } from \"../api/movies-api\";\r\nimport PageTemplate from '../components/templateMovieListPage';\r\nimport { useQuery } from 'react-query';\r\nimport Spinner from '../components/spinner';\r\nimport AddToFavoritesIcon from '../components/cardIcons/addToFavorites'\r\nimport { useParams } from 'react-router-dom';\r\nimport { MoviesContext } from \"../contexts/moviesContext\";\r\n\r\nconst RecommendPage = (props) => {\r\n  const [favoriteGenres, setFavoriteGenres] = useState([])\r\n  const context = useContext(MoviesContext);\r\n  const { page } = useParams();\r\n  const { data: pages, error, isLoading, isError } = useQuery(\r\n    [\"RecommendPage\"],\r\n    getMovies\r\n  );\r\n  if (isLoading) {\r\n    return <Spinner />\r\n  }\r\n\r\n  if (isError) {\r\n    return <h1>{error.message}</h1>\r\n  }\r\n  const movies = pages;\r\n\r\n  const favorites = movies.filter(m => m.favorite)\r\n  localStorage.setItem('favorites', JSON.stringify(favorites))\r\n\r\n  context.favorites.map((json) => {\r\n    getMovieById(json)\r\n      .then((json) => {\r\n        const genreIds = json.genres.map((response) =>\r\n          response.id\r\n        )\r\n        setFavoriteGenres(genreIds)\r\n\r\n      }\r\n      )\r\n  })\r\n\r\n  function intersection(firstArr, secondArr) {\r\n    let hashMap = {},\r\n      intersectionArr = [];\r\n\r\n    // 第一步：数组 1 利用 hashMap 实现去重\r\n    firstArr.forEach(function (val) {\r\n      hashMap[val] = 1;\r\n    })\r\n\r\n    // 第二步：遍历数组2，去重 secondArr ，并判断是否有交集\r\n    secondArr.forEach((val) => {\r\n      if (hashMap[val] === 1) {\r\n        intersectionArr.push(val);\r\n        hashMap[val]++;\r\n      }\r\n    })\r\n\r\n    if(intersectionArr = []){\r\n      return false;\r\n    }\r\n    else{\r\n      return true;\r\n    }\r\n  }\r\n\r\n  movies.filter((movie) => {\r\n    console.log(compare([28, 878, 14],[28, 12, 18, 14]))\r\n    console.log(favoriteGenres)\r\n    console.log(movie.genre_ids)\r\n  }\r\n      \r\n\r\n  )\r\n\r\n\r\n  return (\r\n    <>\r\n      <PageTemplate\r\n        title=\"Recommend Movies\"\r\n        movies={movies}\r\n        action={(movie) => {\r\n          return <AddToFavoritesIcon movie={movie} />\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default RecommendPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}